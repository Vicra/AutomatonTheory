package AutomatonsTheory.AutomatonExtensions.RegularExpressionParserDirectory;

import java_cup.runtime.*;
import java.util.Hashtable;
import AutomatonsTheory.AutomatonExtensions.RegularExpressionParserDirectory.tree.*;

parser code {:
    Hashtable<String,Integer > variables = new Hashtable<String, Integer>();

    public void report_error(String message, Object info) {

        StringBuilder m = new StringBuilder("Error");

        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            if (s.left >= 0) {
                m.append(" in line "+(s.left+1));
                if (s.right >= 0)
                    m.append(", column "+(s.right+1));
            }
        }

        m.append(" : "+message);

        System.err.println(m);
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }
:};






terminal    OR, AND, ASTERISK, LPAREN, RPAREN;
terminal    CARACTER;

non terminal tree.Node     s, t, u, w;



s ::= s:s0 OR t:t0 {: RESULT = new ORNode(s0, t0); :}
    | t:t0 {: RESULT = t0; :}
    ;

t ::= t:t0 AND u:u0 {: RESULT = new ANDNode(t0, u0); :}
    | u:u0 {: RESULT = u0; :}
    ;

u ::= u:u0 ASTERISK {: RESULT = new RepeatNode(u0); :}
    | w:w0 {: RESULT = w0; :}
    ;

w ::= CARACTER:c {: RESULT = new CharNode(c); :}
    | LPAREN s:s0 RPAREN {: RESULT = s0; :}
    ;

